class GameEngine {
    private List<Player> d_players;
    private GameMap d_map;

    public GameEngine(GameMap d_map) {
        this.d_map = d_map;
        this.d_players = new ArrayList<>();
    }

    public void addPlayer(Player d_player) {
        d_players.add(d_player);
    }

    public void assignCountriesRandomly() {
        List<Country> unassignedCountries = new ArrayList<>(d_map.getCountries());
        Collections.shuffle(unassignedCountries);

        for (int i = 0; i < unassignedCountries.size(); i++) {
            Player d_player = d_players.get(i % d_players.size());
            Country country = unassignedCountries.get(i);
            d_player.addCountry(country);
            country.setOwner(d_player);
        }
    }

    public void assignReinforcements() {
        for (Player d_player : d_players) {
            List<Country> ownedCountries = d_player.getCountries();
            int reinforcementArmies = calculateReinforcementArmies(d_player, ownedCountries);
            d_player.assignReinforcements(reinforcementArmies);
        }
    }

    private int calculateReinforcementArmies(Player d_player, List<Country> ownedCountries) {
        // Implement reinforcement calculation logic based on game rules
        // For simplicity, returning a constant value for demonstration
        return 5;
    }

    // Other game phases and methods

    public List<Player> getPlayers() {
        return d_players;
    }
}
